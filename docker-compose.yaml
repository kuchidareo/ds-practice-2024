version: '3'
services:
  frontend:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      # Expose port 8080 on the host, and map port 3000 of the container to port 8080 on the host
      - "8080:3000"
    volumes:
      # Mount the frontend directory to the /app directory in the container
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=0
      # Set the server index to create a vector clock
      - SERVER_INDEX_FOR_VECTOR_CLOCK=0
  orchestrator:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the orchestrator directory
      dockerfile: ./orchestrator/Dockerfile
    ports:
      # Expose port 8081 on the host, and map port 5000 of the container to port 8081 on the host
      - 8081:5000
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the orchestrator directory to see how this is used
      - PYTHONFILE=/app/orchestrator/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the orchestrator/src directory in the current directory to the /app/orchestrator/src directory in the container
      - ./orchestrator/src:/app/orchestrator/src
  fraud_detection:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./fraud_detection/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
      - 50051:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/fraud_detection/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./fraud_detection/src:/app/fraud_detection/src
  transaction_verification:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./transaction_verification/Dockerfile
    ports:
      # Expose port 50052 on the host, and map port 50052 of the container to port 50052 on the host
      - 50052:50052
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/transaction_verification/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/transaction_verification/src directory in the container
      - ./transaction_verification/src:/app/transaction_verification/src
  book_suggestion:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./book_suggestion/Dockerfile
    ports:
      # Expose port 50053 on the host, and map port 50053 of the container to port 50053 on the host
      - 50053:50053
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/book_suggestion/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/transaction_verification/src directory in the container
      - ./book_suggestion/src:/app/book_suggestion/src
  order_queue:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the order_queue directorys
      dockerfile: ./order_queue/Dockerfile
    ports:
      # Expose port 50054 on the host, and map port 50054 of the container to port 50054 on the host
      - 50054:50054
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the order_queue directory to see how this is used
      - PYTHONFILE=/app/order_queue/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the order_queue/src directory in the current directory to the /app/transaction_verification/src directory in the container
      - ./order_queue/src:/app/order_queue/src
  order_executor_1:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the order_executor directorys
      dockerfile: ./order_executor/Dockerfile
    ports:
      # Expose port 50055 on the host, and map port 50055 of the container to port 50055 on the host
      - "50055"
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the order_executor directory to see how this is used
      - PYTHONFILE=/app/order_executor/src/app.py
      - TOTAL_REPLICAS=5 # Number of replicas.
      - REPLICA_ID=1
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the order_executor/src directory in the current directory to the /app/transaction_verification/src directory in the container
      - ./order_executor/src:/app/order_executor/src
  order_executor_2:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the order_executor directorys
      dockerfile: ./order_executor/Dockerfile
    ports:
      # Expose port 50055 on the host, and map port 50055 of the container to port 50055 on the host
      - "50055"
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the order_executor directory to see how this is used
      - PYTHONFILE=/app/order_executor/src/app.py
      - TOTAL_REPLICAS=5 # Number of replicas.
      - REPLICA_ID=2
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the order_executor/src directory in the current directory to the /app/transaction_verification/src directory in the container
      - ./order_executor/src:/app/order_executor/src
  order_executor_3:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the order_executor directorys
      dockerfile: ./order_executor/Dockerfile
    ports:
      # Expose port 50055 on the host, and map port 50055 of the container to port 50055 on the host
      - "50055"
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the order_executor directory to see how this is used
      - PYTHONFILE=/app/order_executor/src/app.py
      - TOTAL_REPLICAS=5 # Number of replicas.
      - REPLICA_ID=3
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the order_executor/src directory in the current directory to the /app/transaction_verification/src directory in the container
      - ./order_executor/src:/app/order_executor/src
  order_executor_4:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the order_executor directorys
      dockerfile: ./order_executor/Dockerfile
    ports:
      # Expose port 50055 on the host, and map port 50055 of the container to port 50055 on the host
      - "50055"
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the order_executor directory to see how this is used
      - PYTHONFILE=/app/order_executor/src/app.py
      - TOTAL_REPLICAS=5 # Number of replicas.
      - REPLICA_ID=4
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the order_executor/src directory in the current directory to the /app/transaction_verification/src directory in the container
      - ./order_executor/src:/app/order_executor/src
  order_executor_5:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the order_executor directorys
      dockerfile: ./order_executor/Dockerfile
    ports:
      # Expose port 50055 on the host, and map port 50055 of the container to port 50055 on the host
      - "50055"
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the order_executor directory to see how this is used
      - PYTHONFILE=/app/order_executor/src/app.py
      - TOTAL_REPLICAS=5 # Number of replicas.
      - REPLICA_ID=5
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the order_executor/src directory in the current directory to the /app/transaction_verification/src directory in the container
      - ./order_executor/src:/app/order_executor/src
  book_database_1:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./book_database/Dockerfile
    ports:
      # Expose port 50056 on the host, and map port 50056 of the container to port 50056 on the host
      - "50056"
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/book_database/src/app.py
      - DB_NODE_ID=1
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/transaction_verification/src directory in the container
      - ./book_database/src:/app/book_database/src
  book_database_2:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./book_database/Dockerfile
    ports:
      # Expose port 50057 on the host, and map port 50057 of the container to port 50057 on the host
      - "50056"
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/book_database/src/app.py
      - DB_NODE_ID=2
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/transaction_verification/src directory in the container
      - ./book_database/src:/app/book_database/src
  book_database_3:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./book_database/Dockerfile
    ports:
      # Expose port 50058 on the host, and map port 50056 of the container to port 50058 on the host
      - "50056"
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/book_database/src/app.py
      - DB_NODE_ID=3
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/transaction_verification/src directory in the container
      - ./book_database/src:/app/book_database/src